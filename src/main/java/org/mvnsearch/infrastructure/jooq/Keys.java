/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq;


import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.mvnsearch.infrastructure.jooq.tables.AuthorTable;
import org.mvnsearch.infrastructure.jooq.tables.BookStoreTable;
import org.mvnsearch.infrastructure.jooq.tables.BookTable;
import org.mvnsearch.infrastructure.jooq.tables.BookToBookStoreTable;
import org.mvnsearch.infrastructure.jooq.tables.LanguageTable;
import org.mvnsearch.infrastructure.jooq.tables.records.AuthorRecord;
import org.mvnsearch.infrastructure.jooq.tables.records.BookRecord;
import org.mvnsearch.infrastructure.jooq.tables.records.BookStoreRecord;
import org.mvnsearch.infrastructure.jooq.tables.records.BookToBookStoreRecord;
import org.mvnsearch.infrastructure.jooq.tables.records.LanguageRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>jooq</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = Identities0.IDENTITY_AUTHOR;
    public static final Identity<BookRecord, Integer> IDENTITY_BOOK = Identities0.IDENTITY_BOOK;
    public static final Identity<LanguageRecord, Integer> IDENTITY_LANGUAGE = Identities0.IDENTITY_LANGUAGE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = UniqueKeys0.KEY_AUTHOR_PRIMARY;
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = UniqueKeys0.KEY_BOOK_PRIMARY;
    public static final UniqueKey<BookStoreRecord> KEY_BOOK_STORE_NAME = UniqueKeys0.KEY_BOOK_STORE_NAME;
    public static final UniqueKey<BookToBookStoreRecord> KEY_BOOK_TO_BOOK_STORE_PRIMARY = UniqueKeys0.KEY_BOOK_TO_BOOK_STORE_PRIMARY;
    public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = UniqueKeys0.KEY_LANGUAGE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = Internal.createIdentity(AuthorTable.AUTHOR, AuthorTable.AUTHOR.ID);
        public static Identity<BookRecord, Integer> IDENTITY_BOOK = Internal.createIdentity(BookTable.BOOK, BookTable.BOOK.ID);
        public static Identity<LanguageRecord, Integer> IDENTITY_LANGUAGE = Internal.createIdentity(LanguageTable.LANGUAGE, LanguageTable.LANGUAGE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(AuthorTable.AUTHOR, "KEY_author_PRIMARY", new TableField[] { AuthorTable.AUTHOR.ID }, true);
        public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(BookTable.BOOK, "KEY_book_PRIMARY", new TableField[] { BookTable.BOOK.ID }, true);
        public static final UniqueKey<BookStoreRecord> KEY_BOOK_STORE_NAME = Internal.createUniqueKey(BookStoreTable.BOOK_STORE, "KEY_book_store_name", new TableField[] { BookStoreTable.BOOK_STORE.NAME }, true);
        public static final UniqueKey<BookToBookStoreRecord> KEY_BOOK_TO_BOOK_STORE_PRIMARY = Internal.createUniqueKey(BookToBookStoreTable.BOOK_TO_BOOK_STORE, "KEY_book_to_book_store_PRIMARY", new TableField[] { BookToBookStoreTable.BOOK_TO_BOOK_STORE.NAME, BookToBookStoreTable.BOOK_TO_BOOK_STORE.BOOK_ID }, true);
        public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = Internal.createUniqueKey(LanguageTable.LANGUAGE, "KEY_language_PRIMARY", new TableField[] { LanguageTable.LANGUAGE.ID }, true);
    }
}
