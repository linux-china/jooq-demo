/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvnsearch.infrastructure.jooq.JooqSchema;
import org.mvnsearch.infrastructure.jooq.Keys;
import org.mvnsearch.infrastructure.jooq.tables.records.BookRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookTable extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.book</code>
     */
    public static final BookTable BOOK = new BookTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>jooq.book.id</code>.
     */
    public final TableField<BookRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq.book.author_id</code>.
     */
    public final TableField<BookRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.book.title</code>.
     */
    public final TableField<BookRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>jooq.book.published_in</code>.
     */
    public final TableField<BookRecord, Integer> PUBLISHED_IN = createField(DSL.name("published_in"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.book.language_id</code>.
     */
    public final TableField<BookRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private BookTable(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BookTable(Name alias, Table<BookRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooq.book</code> table reference
     */
    public BookTable(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>jooq.book</code> table reference
     */
    public BookTable(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>jooq.book</code> table reference
     */
    public BookTable() {
        this(DSL.name("book"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqSchema.JOOQ;
    }

    @Override
    public Identity<BookRecord, Integer> getIdentity() {
        return (Identity<BookRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    @Override
    public BookTable as(String alias) {
        return new BookTable(DSL.name(alias), this);
    }

    @Override
    public BookTable as(Name alias) {
        return new BookTable(alias, this);
    }

    @Override
    public BookTable as(Table<?> alias) {
        return new BookTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(String name) {
        return new BookTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(Name name) {
        return new BookTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(Table<?> name) {
        return new BookTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable where(Condition condition) {
        return new BookTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
