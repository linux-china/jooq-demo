/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvnsearch.infrastructure.jooq.JooqSchema;
import org.mvnsearch.infrastructure.jooq.Keys;
import org.mvnsearch.infrastructure.jooq.tables.records.BookToBookStoreRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookToBookStoreTable extends TableImpl<BookToBookStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.book_to_book_store</code>
     */
    public static final BookToBookStoreTable BOOK_TO_BOOK_STORE = new BookToBookStoreTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookToBookStoreRecord> getRecordType() {
        return BookToBookStoreRecord.class;
    }

    /**
     * The column <code>jooq.book_to_book_store.name</code>.
     */
    public final TableField<BookToBookStoreRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>jooq.book_to_book_store.book_id</code>.
     */
    public final TableField<BookToBookStoreRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.book_to_book_store.stock</code>.
     */
    public final TableField<BookToBookStoreRecord, Integer> STOCK = createField(DSL.name("stock"), SQLDataType.INTEGER, this, "");

    private BookToBookStoreTable(Name alias, Table<BookToBookStoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BookToBookStoreTable(Name alias, Table<BookToBookStoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooq.book_to_book_store</code> table reference
     */
    public BookToBookStoreTable(String alias) {
        this(DSL.name(alias), BOOK_TO_BOOK_STORE);
    }

    /**
     * Create an aliased <code>jooq.book_to_book_store</code> table reference
     */
    public BookToBookStoreTable(Name alias) {
        this(alias, BOOK_TO_BOOK_STORE);
    }

    /**
     * Create a <code>jooq.book_to_book_store</code> table reference
     */
    public BookToBookStoreTable() {
        this(DSL.name("book_to_book_store"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqSchema.JOOQ;
    }

    @Override
    public UniqueKey<BookToBookStoreRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_TO_BOOK_STORE_PRIMARY;
    }

    @Override
    public BookToBookStoreTable as(String alias) {
        return new BookToBookStoreTable(DSL.name(alias), this);
    }

    @Override
    public BookToBookStoreTable as(Name alias) {
        return new BookToBookStoreTable(alias, this);
    }

    @Override
    public BookToBookStoreTable as(Table<?> alias) {
        return new BookToBookStoreTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStoreTable rename(String name) {
        return new BookToBookStoreTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStoreTable rename(Name name) {
        return new BookToBookStoreTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStoreTable rename(Table<?> name) {
        return new BookToBookStoreTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable where(Condition condition) {
        return new BookToBookStoreTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStoreTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStoreTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStoreTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStoreTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStoreTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
