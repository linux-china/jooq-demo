/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvnsearch.infrastructure.jooq.JooqSchema;
import org.mvnsearch.infrastructure.jooq.Keys;
import org.mvnsearch.infrastructure.jooq.tables.records.LanguageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LanguageTable extends TableImpl<LanguageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.language</code>
     */
    public static final LanguageTable LANGUAGE = new LanguageTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageRecord> getRecordType() {
        return LanguageRecord.class;
    }

    /**
     * The column <code>jooq.language.id</code>.
     */
    public final TableField<LanguageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq.language.cd</code>.
     */
    public final TableField<LanguageRecord, String> CD = createField(DSL.name("cd"), SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>jooq.language.description</code>.
     */
    public final TableField<LanguageRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(50), this, "");

    private LanguageTable(Name alias, Table<LanguageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LanguageTable(Name alias, Table<LanguageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jooq.language</code> table reference
     */
    public LanguageTable(String alias) {
        this(DSL.name(alias), LANGUAGE);
    }

    /**
     * Create an aliased <code>jooq.language</code> table reference
     */
    public LanguageTable(Name alias) {
        this(alias, LANGUAGE);
    }

    /**
     * Create a <code>jooq.language</code> table reference
     */
    public LanguageTable() {
        this(DSL.name("language"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqSchema.JOOQ;
    }

    @Override
    public Identity<LanguageRecord, Integer> getIdentity() {
        return (Identity<LanguageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LanguageRecord> getPrimaryKey() {
        return Keys.KEY_LANGUAGE_PRIMARY;
    }

    @Override
    public LanguageTable as(String alias) {
        return new LanguageTable(DSL.name(alias), this);
    }

    @Override
    public LanguageTable as(Name alias) {
        return new LanguageTable(alias, this);
    }

    @Override
    public LanguageTable as(Table<?> alias) {
        return new LanguageTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageTable rename(String name) {
        return new LanguageTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageTable rename(Name name) {
        return new LanguageTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageTable rename(Table<?> name) {
        return new LanguageTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable where(Condition condition) {
        return new LanguageTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LanguageTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LanguageTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LanguageTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LanguageTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LanguageTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
