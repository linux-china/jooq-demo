/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq.tables.records;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.mvnsearch.infrastructure.jooq.tables.AuthorTable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record7<Integer, String, String, String, LocalDate, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq.author.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>jooq.author.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq.author.first_name</code>.
     */
    public void setFirstName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>jooq.author.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq.author.last_name</code>.
     */
    public void setLastName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>jooq.author.last_name</code>.
     */
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jooq.author.gender</code>.
     */
    public void setGender(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>jooq.author.gender</code>.
     */
    public String getGender() {
        return (String) get(3);
    }

    /**
     * Setter for <code>jooq.author.date_of_birth</code>.
     */
    public void setDateOfBirth(LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for <code>jooq.author.date_of_birth</code>.
     */
    public LocalDate getDateOfBirth() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for <code>jooq.author.year_of_birth</code>.
     */
    public void setYearOfBirth(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>jooq.author.year_of_birth</code>.
     */
    public Integer getYearOfBirth() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>jooq.author.distinguished</code>.
     */
    public void setDistinguished(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>jooq.author.distinguished</code>.
     */
    public Integer getDistinguished() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, LocalDate, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, String, LocalDate, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AuthorTable.AUTHOR.ID;
    }

    @Override
    public Field<String> field2() {
        return AuthorTable.AUTHOR.FIRST_NAME;
    }

    @Override
    public Field<String> field3() {
        return AuthorTable.AUTHOR.LAST_NAME;
    }

    @Override
    public Field<String> field4() {
        return AuthorTable.AUTHOR.GENDER;
    }

    @Override
    public Field<LocalDate> field5() {
        return AuthorTable.AUTHOR.DATE_OF_BIRTH;
    }

    @Override
    public Field<Integer> field6() {
        return AuthorTable.AUTHOR.YEAR_OF_BIRTH;
    }

    @Override
    public Field<Integer> field7() {
        return AuthorTable.AUTHOR.DISTINGUISHED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFirstName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public String component4() {
        return getGender();
    }

    @Override
    public LocalDate component5() {
        return getDateOfBirth();
    }

    @Override
    public Integer component6() {
        return getYearOfBirth();
    }

    @Override
    public Integer component7() {
        return getDistinguished();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFirstName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public String value4() {
        return getGender();
    }

    @Override
    public LocalDate value5() {
        return getDateOfBirth();
    }

    @Override
    public Integer value6() {
        return getYearOfBirth();
    }

    @Override
    public Integer value7() {
        return getDistinguished();
    }

    @Override
    public AuthorRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AuthorRecord value2(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public AuthorRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public AuthorRecord value4(String value) {
        setGender(value);
        return this;
    }

    @Override
    public AuthorRecord value5(LocalDate value) {
        setDateOfBirth(value);
        return this;
    }

    @Override
    public AuthorRecord value6(Integer value) {
        setYearOfBirth(value);
        return this;
    }

    @Override
    public AuthorRecord value7(Integer value) {
        setDistinguished(value);
        return this;
    }

    @Override
    public AuthorRecord values(Integer value1, String value2, String value3, String value4, LocalDate value5, Integer value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(AuthorTable.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Integer id, String firstName, String lastName, String gender, LocalDate dateOfBirth, Integer yearOfBirth, Integer distinguished) {
        super(AuthorTable.AUTHOR);

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setGender(gender);
        setDateOfBirth(dateOfBirth);
        setYearOfBirth(yearOfBirth);
        setDistinguished(distinguished);
    }
}
