/*
 * This file is generated by jOOQ.
 */
package org.mvnsearch.infrastructure.jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import java.time.LocalDate;

import javax.annotation.Nullable;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.mvnsearch.infrastructure.jooq.tables.Author;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "author",
    schema = "jooq"
)
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq.author.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>jooq.author.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq.author.first_name</code>.
     */
    public void setFirstName(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>jooq.author.first_name</code>.
     */
    @Column(name = "first_name", length = 50)
    @Nullable
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq.author.last_name</code>.
     */
    public void setLastName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>jooq.author.last_name</code>.
     */
    @Column(name = "last_name", nullable = false, length = 50)
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jooq.author.gender</code>.
     */
    public void setGender(@Nullable String value) {
        set(3, value);
    }

    /**
     * Getter for <code>jooq.author.gender</code>.
     */
    @Column(name = "gender", length = 16)
    @Nullable
    public String getGender() {
        return (String) get(3);
    }

    /**
     * Setter for <code>jooq.author.date_of_birth</code>.
     */
    public void setDateOfBirth(@Nullable LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for <code>jooq.author.date_of_birth</code>.
     */
    @Column(name = "date_of_birth")
    @Nullable
    public LocalDate getDateOfBirth() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for <code>jooq.author.year_of_birth</code>.
     */
    public void setYearOfBirth(@Nullable Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>jooq.author.year_of_birth</code>.
     */
    @Column(name = "year_of_birth")
    @Nullable
    public Integer getYearOfBirth() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>jooq.author.distinguished</code>.
     */
    public void setDistinguished(@Nullable Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>jooq.author.distinguished</code>.
     */
    @Column(name = "distinguished")
    @Nullable
    public Integer getDistinguished() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Integer id, @Nullable String firstName, String lastName, @Nullable String gender, @Nullable LocalDate dateOfBirth, @Nullable Integer yearOfBirth, @Nullable Integer distinguished) {
        super(Author.AUTHOR);

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setGender(gender);
        setDateOfBirth(dateOfBirth);
        setYearOfBirth(yearOfBirth);
        setDistinguished(distinguished);
        resetTouchedOnNotNull();
    }
}
